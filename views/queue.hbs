<h2>Queue</h2>

<a href="venue/{{queryVenue}}" class="btn btn-primary">Purchase</a>

<script type="module">
    import { parseArray } from '/js/array-functions.mjs'
    
    const params = new URLSearchParams(window.location.search)
    const nextUrl = "venue/" + (params.has("venue") ? params.get("venue") : "")

    let queue, interval, usersTurn = false

    $(document).ready(async function() {
        // thought I could do this server side instead, but actually now I think about it it makes sense to wait until the queue loads

        // if no queue direct straight to 
        //queue = await $.get('/api/get-queue', { tour_id: {{req.params.tour_id}} }, (data) => data)
        //if (parseArray(await queue.queue).length == 0) {
        //    console.log(parseArray(queue.queue))
        //    window.location.replace(nextUrl)}

        // otherwise join the queue...
        $.post('/api/user-join-queue', {
            "tour_id": {{req.params.tour_id}},
            "user_id": {{req.user.user_id}},
        })

        $(window).on("beforeunload", function() {
                $.post('/api/user-leave-queue', {
                    "tour_id": {{req.params.tour_id}},
                    "user_id": {{req.user.user_id}},
                })
        })

        

        // ...then check for queue updates every second/changed to five seconds so don't catch db at a weird time
        interval = setInterval(checkQueue, 5000)
    })

    $("body").attr("onunload", function() {
        $.post('/api/user-leave-queue', {
            "tour_id": {{req.params.tour_id}},
            "user_id": {{req.user.user_id}},
        })
    })

    /*$(window).bind("unload", function(event) {
        //event.preventDefault()
        //console.log(usersTurn)
        //if (!usersTurn) {
                    $.post('/api/user-leave-queue', {
                    "tour_id": {{req.params.tour_id}},
                    "user_id": {{req.user.user_id}},
                })
        //}

        //return "sure?"
    })*/

    async function checkQueue() {
        console.log("check q")
        // get queue obj
        queue = await $.get('/api/get-queue', { tour_id: {{req.params.tour_id}} }, (data) => data)

        // check if user is first in line
        let usersInQueue = parseArray(queue.queue)
        let queuePos = usersInQueue.indexOf({{req.user.user_id}})

        // check headcount < capacity
        if (queuePos == 0 && queue.headcount < queue.capacity) {
            // by just updating headcount in the db it worked!!

            // clear the interval - otherwise alerts build up every second
            clearInterval(interval)

            // timeout to leave queue if user doesn't respong
            // to leave the queue I could do something like /api/user-queue-timeout {delay: , user_id, tour_id}
            // then set a timeout 
            // noooo I don't need to do all that, just setTimeout here and clear it on pagehide
            // also use it to cancel alert and/or trigger a new one saying they missed their turn
            // refresh page after timeout and maybe add a query string of turn-missed which can be used to provide more info
            // refreshing should then clear the alert automatically and move them to back of queue

            // alert user of their turn
            alert("It's your turn to buy tickets! Press OK to proceed")
            
            // redirect - alert stops code running so only redirect once alert is okayed
            // should do window.replace so they don't go back to queue
            // nope - .replace doesn't let any of my events fire e.g. pagehide
            // window.location.replace("venue/" + venue)
            window.location.href = nextUrl

            // could also send an email and do a push notifications
            // send email/push notifications before alert so they actually send
            // could have an api endpoint for send email that takes recipient(s) and message
        }

        // if so
            // alert that they can join
            // cancel interval
            // set timeout to
                // move to back of queue if they don't join
            // OK-ing the alert should move them to purchase page AND cancel the timeout

        // also
        // use queue pos to update info on page
        // and periodically update other info on page
    }

    // beforeunload seems to work best - used db so it doesn't immediately disappear after console log
    // async causes a "are you sure you want to leave" alert
    // actually pagehide works too and is recommended by mozilla
    // also this is on wrong page... 
    // wanna use on of these events to update the queue, then probably use a setinterval on this page to let users know when they reach front of the queue
    /*$(window).on('beforeunload', function(event) {
        $.post('/api/queue-test', { val: "before unload" })
        console.log("before unload")

        // REMOVE USER FROM QUEUE
        
    })

    $(window).on('unload', async function(event) {
        await $.post('/api/queue-test', {val: "unload"})
        console.log("unload")
    })*/
</script>